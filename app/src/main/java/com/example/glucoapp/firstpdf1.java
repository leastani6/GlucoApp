package com.example.glucoapp;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Environment;

import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;


import java.io.File;
import java.io.FileOutputStream;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;



import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import static android.app.PendingIntent.getActivity;
import static android.content.Context.MODE_PRIVATE;
import static com.example.glucoapp.Activity2.MY_PREFS_NAME;


public class firstpdf1 {
         //   private static String FILE = "c:/users/user/desktop/FirstPdf.pdf";
    private  static String directory_path = Environment.getExternalStorageDirectory().getPath() + "/mypdf/";
    File file = new File(directory_path);
    //  File file=new File(filePath);
//        if (!file.exists()) {
//            file.mkdirs();
    private static Context context;
   public firstpdf1(Context context){
        this.context=context;



    }
  private static   String targetPdf = directory_path+"report.pdf";
  //  File filePath = new File(targetPdf);
            private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
                    Font.BOLD);
            private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                    Font.NORMAL, BaseColor.RED);
            private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
                    Font.BOLD);
            private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                    Font.BOLD);

            public void create() {
                try {

                    File filePath = new File(targetPdf);
                    Document document = new Document();
                    PdfWriter.getInstance(document, new FileOutputStream(filePath));
                    document.open();
                    addMetaData(document);
                    addTitlePage(document);
                    addContent(document);
                    document.close();

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            // iText allows to add metadata to the PDF which can be viewed in your Adobe
            // Reader
            // under File -> Properties
            private static void addMetaData(Document document) {
                document.addTitle("GLucapp Report");
                document.addSubject("Using iText");
                document.addKeywords("Java, PDF, iText");
                document.addAuthor("Lea Stani");
                document.addCreator("Lea Stani");
            }

            private static void addTitlePage(Document document) throws DocumentException {
                Paragraph preface = new Paragraph();
                // We add one empty line
                addEmptyLine(preface, 1);
                // Lets write a big header
                preface.add(new Paragraph("Glucoapp Report", catFont));

                addEmptyLine(preface, 1);
                // Will create: Report generated by: _name, _date
                preface.add(new Paragraph(
                        "Report generated on: Glucoapp"  + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                        smallBold));
                addEmptyLine(preface, 3);

                addEmptyLine(preface, 8);

                preface.add(new Paragraph(
                        "This document contains personal data. Please be careful .",
                        redFont));

                document.add(preface);
                // Start a new page
                document.newPage();
            }

            private static void addContent(Document document) throws DocumentException {
                Anchor anchor = new Anchor("First Page", catFont);

                anchor.setName("Medicine Report");

                // Second parameter is the number of the chapter
                Chapter catPart = new Chapter(new Paragraph(anchor), 1);

                Paragraph subPara = new Paragraph(" Medicine Report ", subFont);
                Section subCatPart = catPart.addSection(subPara);
addEmptyLine(subPara,2);





                // add a table
                createTable(subCatPart);

                // now add all this to the document
                document.add(catPart);

                // Next section
                anchor = new Anchor("Second Page", catFont);
                anchor.setName("Insulin report");

                // Second parameter is the number of the chapter
                Chapter catPart1 = new Chapter(new Paragraph(anchor), 2);
                Paragraph subPara1 = new Paragraph(" Insulin Report ", subFont);
                Section subCatPart2 = catPart1.addSection(subPara1, 1);
                addEmptyLine(subPara1,2);



                // add a table
                createTable1(subCatPart2);


                // now add all this to the document
                document.add(catPart1);

            }

            private static void createTable(Section subCatPart)
                    throws BadElementException {
                PdfPTable table = new PdfPTable(2);
                SharedPreferences prefs = context.getSharedPreferences(MY_PREFS_NAME, MODE_PRIVATE);
                String name = prefs.getString("name", "No name defined");//"No name defined" is the default value.

                DatabaseHelper myDB = new DatabaseHelper(context);
                ArrayList<HashMap<String, String>> userList = myDB.GetMeds(name);
//


//
                PdfPCell c1 = new PdfPCell(new Phrase("Medicine Name"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);

                c1 = new PdfPCell(new Phrase("Medicine Time"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);


                table.setHeaderRows(1);
                for(int i = 0; i < userList.size(); i++)
                {

                    Iterator it = (Iterator)userList.get(i).entrySet().iterator();

                    while (it.hasNext()) {
                        Map.Entry pairs = (Map.Entry)it.next();
                        table.addCell(String.valueOf(pairs.getValue()));
                        it.remove(); // avoids a ConcurrentModificationException
                    }

                }
myDB.close();
                subCatPart.add(table);

            }
    private static void createTable1(Section subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(2);
        SharedPreferences prefs =context.getSharedPreferences(MY_PREFS_NAME, MODE_PRIVATE);
        final  String name1 = prefs.getString("name", "No name defined");

        DatabaseHelper myDB = new DatabaseHelper(context);
        ArrayList<HashMap<String, String>> userList = myDB.GetIns(name1);
//


//
        PdfPCell c1 = new PdfPCell(new Phrase("Medicine Name"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Medicine Time"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);


        table.setHeaderRows(1);
        for(int i = 0; i < userList.size(); i++)
        {

            Iterator it = (Iterator)userList.get(i).entrySet().iterator();

            while (it.hasNext()) {
                Map.Entry pairs = (Map.Entry)it.next();
                table.addCell(String.valueOf(pairs.getValue()));
                it.remove(); // avoids a ConcurrentModificationException
            }

        }
        myDB.close();
        subCatPart.add(table);

    }


            private static void createList(Section subCatPart) {
                List list = new List(true, false, 10);
                list.add(new ListItem("First point"));
                list.add(new ListItem("Second point"));
                list.add(new ListItem("Third point"));
                subCatPart.add(list);
            }

            private static void addEmptyLine(Paragraph paragraph, int number) {
                for (int i = 0; i < number; i++) {
                    paragraph.add(new Paragraph(" "));
                }
            }
        }